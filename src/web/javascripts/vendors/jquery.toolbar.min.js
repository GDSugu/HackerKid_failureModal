/* eslint-disable no-param-reassign */
/**
 * Toolbar.js
 *
 * @fileoverview  jQuery plugin that creates tooltip style toolbars.
 * @link      http://paulkinzett.github.com/toolbar/
 * @author  Paul Kinzett (http://kinzett.co.nz/)
 * @version   1.1.0
 * @requires  jQuery 1.7+
 *
 * @license jQuery Toolbar Plugin v1.1.0
 * http://paulkinzett.github.com/toolbar/
 * Copyright 2013 - 2015 Paul Kinzett (http://kinzett.co.nz/)
 * Released under the MIT license.
 * <https://raw.github.com/paulkinzett/toolbar/master/LICENSE.txt>
 */
import jQuery from 'jquery';

if (typeof Object.create !== 'function') {
  Object.create = function (obj) {
    function F() {}
    F.prototype = obj;
    return new F();
  };
}

function initiate($, window) {
  const ToolBar = {
    init(options, elem) {
      const self = this;
      self.elem = elem;
      self.$elem = $(elem);
      self.options = $.extend({}, $.fn.toolbar.options, options);
      self.metadata = self.$elem.data();
      self.overrideOptions();
      self.toolbar = $('<div class="tool-container" />')
        .addClass(`tool-${self.options.position}`)
        .addClass(`toolbar-${self.options.style}`)
        .append('<div class="tool-items" />')
        .append('<div class="arrow" />')
        .appendTo('body')
        .css('opacity', 0)
        .hide();
      self.toolbar_arrow = self.toolbar.find('.arrow');
      self.initializeToolbar();
    },

    overrideOptions() {
      const self = this;
      $.each(self.options, ($option) => {
        if (typeof (self.$elem.data(`toolbar-${$option}`)) !== 'undefined') {
          self.options[$option] = self.$elem.data(`toolbar-${$option}`);
        }
      });
    },

    initializeToolbar() {
      const self = this;
      self.populateContent();
      self.setTrigger();
      self.toolbarWidth = self.toolbar.width();
    },

    setTrigger() {
      const self = this;

      if (self.options.event !== 'click') {
        let moveTime;

        // eslint-disable-next-line no-inner-declarations
        function decideTimeout() {
          if (self.$elem.hasClass('pressed')) {
            moveTime = setTimeout(() => {
              self.hide();
            }, 150);
          } else {
            clearTimeout(moveTime);
          }
        }

        self.$elem.on({
          mouseenter() {
            if (self.$elem.hasClass('pressed')) {
              clearTimeout(moveTime);
            } else {
              self.show();
            }
          },
        });

        self.$elem.parent().on({
          mouseleave() {
            decideTimeout();
          },
        });

        $('.tool-container').on({
          mouseenter() {
            clearTimeout(moveTime);
          },
          mouseleave() {
            decideTimeout();
          },
        });
      }

      if (self.options.event === 'click') {
        self.$elem.on('click', (event) => {
          event.preventDefault();
          if (self.$elem.hasClass('pressed')) {
            self.hide();
          } else {
            self.show();
          }
        });

        if (self.options.hideOnClick) {
          $('html').on('click.toolbar', (event) => {
            if (event.target !== self.elem
        && self.$elem.has(event.target).length === 0
        && self.toolbar.has(event.target).length === 0
        && self.toolbar.is(':visible')) {
              self.hide();
            }
          });
        }
      }

      if (self.options.hover) {
        let moveTime;

        // eslint-disable-next-line no-inner-declarations
        function decideTimeout() {
          if (self.$elem.hasClass('pressed')) {
            moveTime = setTimeout(() => {
              self.hide();
            }, 150);
          } else {
            clearTimeout(moveTime);
          }
        }

        self.$elem.on({
          mouseenter() {
            if (self.$elem.hasClass('pressed')) {
              clearTimeout(moveTime);
            } else {
              self.show();
            }
          },
        });

        self.$elem.parent().on({
          mouseleave() {
            decideTimeout();
          },
        });

        $('.tool-container').on({
          mouseenter() {
            clearTimeout(moveTime);
          },
          mouseleave() {
            decideTimeout();
          },
        });
      }

      $(window).resize((event) => {
        event.stopPropagation();
        if (self.toolbar.is(':visible')) {
          self.toolbarCss = self.getCoordinates(self.options.position, 20);
          self.collisionDetection();
          self.toolbar.css(self.toolbarCss);
          self.toolbar_arrow.css(self.arrowCss);
        }
      });
    },

    populateContent() {
      const self = this;
      const location = self.toolbar.find('.tool-items');
      const content = $(self.options.content).clone(true).find('a').addClass('tool-item');
      location.html(content);
      location.find('.tool-item').on('click', function (event) {
        event.preventDefault();
        self.$elem.trigger('toolbarItemClick', this);
      });
    },

    calculatePosition() {
      const self = this;
      self.arrowCss = {};
      self.toolbarCss = self.getCoordinates(self.options.position, self.options.adjustment);
      self.toolbarCss.position = 'absolute';
      self.toolbarCss.zIndex = self.options.zIndex;
      self.collisionDetection();
      self.toolbar.css(self.toolbarCss);
      self.toolbar_arrow.css(self.arrowCss);
    },

    getCoordinates(position, adjustment) {
      const self = this;
      self.coordinates = self.$elem.offset();

      if (self.options.adjustment && self.options.adjustment[self.options.position]) {
        adjustment = self.options.adjustment[self.options.position] + adjustment;
      }

      // eslint-disable-next-line default-case
      switch (self.options.position) {
        case 'top':
          return {
            left: self.coordinates.left
            - (self.toolbar.width() / 2) + (self.$elem.outerWidth() / 2),
            top: self.coordinates.top - self.$elem.outerHeight() - adjustment,
            right: 'auto',
          };
        case 'left':
          return {
            left: self.coordinates.left
            - (self.toolbar.width() / 2) - (self.$elem.outerWidth() / 2) - adjustment,
            top: self.coordinates.top
            - (self.toolbar.height() / 2) + (self.$elem.outerHeight() / 2),
            right: 'auto',
          };
        case 'right':
          return {
            left: self.coordinates.left
            + (self.toolbar.width() / 2) + (self.$elem.outerWidth() / 2) + adjustment,
            top: self.coordinates.top
            - (self.toolbar.height() / 2) + (self.$elem.outerHeight() / 2),
            right: 'auto',
          };
        case 'bottom':
          return {
            left: self.coordinates.left
            - (self.toolbar.width() / 2) + (self.$elem.outerWidth() / 2),
            top: self.coordinates.top + self.$elem.outerHeight() + adjustment,
            right: 'auto',
          };
      }
      return 1;
    },

    collisionDetection() {
      const self = this;
      const edgeOffset = 20;
      if (self.options.position === 'top' || self.options.position === 'bottom') {
        self.arrowCss = {
          left: '50%',
          right: '50%',
        };
        if (self.toolbarCss.left < edgeOffset) {
          self.toolbarCss.left = edgeOffset;
          self.arrowCss.left = self.$elem.offset().left + self.$elem.width() / 2 - (edgeOffset);
        } else if (($(window).width() - (self.toolbarCss.left + self.toolbarWidth)) < edgeOffset) {
          self.toolbarCss.right = edgeOffset;
          self.toolbarCss.left = 'auto';
          self.arrowCss.left = 'auto';
          self.arrowCss.right = ($(window).width()
          - self.$elem.offset().left) - (self.$elem.width() / 2) - (edgeOffset) - 5;
        }
      }
    },

    show() {
      const self = this;
      self.$elem.addClass('pressed');
      self.calculatePosition();
      self.toolbar.show().css({
        opacity: 1,
      }).addClass(`animate-${self.options.animation}`);
      self.$elem.trigger('toolbarShown');
    },

    hide() {
      const self = this;
      const animation = {
        opacity: 0,
      };

      self.$elem.removeClass('pressed');

      // eslint-disable-next-line default-case
      switch (self.options.position) {
        case 'top':
          animation.top = '+=20';
          break;
        case 'left':
          animation.left = '+=20';
          break;
        case 'right':
          animation.left = '-=20';
          break;
        case 'bottom':
          animation.top = '-=20';
          break;
      }

      self.toolbar.animate(animation, 200, () => {
        self.toolbar.hide();
      });

      self.$elem.trigger('toolbarHidden');
    },

    getToolbarElement() {
      return this.toolbar.find('.tool-items');
    },
  };

  $.fn.toolbar = function (options) {
    let a;
    if ($.isPlainObject(options)) {
      a = this.each(function () {
        const toolbarObj = Object.create(ToolBar);
        toolbarObj.init(options, this);
        $(this).data('toolbarObj', toolbarObj);
      });
    } else if (typeof options === 'string' && options.indexOf('_') !== 0) {
      const toolbarObj = $(this).data('toolbarObj');
      const method = toolbarObj[options];
      // eslint-disable-next-line prefer-rest-params
      return method.apply(toolbarObj, $.makeArray(arguments).slice(1));
    }
    return a;
  };

  // eslint-disable-next-line no-param-reassign
  $.fn.toolbar.options = {
    content: '#myContent',
    position: 'top',
    hideOnClick: false,
    zIndex: 120,
    hover: false,
    style: 'default',
    animation: 'standard',
    adjustment: 10,
  };
}

initiate(jQuery, window, document);
